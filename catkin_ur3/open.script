def myProg():
	force0 = floor(5)
	pos0 = floor(1100)
	force1 = floor(40)
	pos1 = floor(100)
	force2 = floor(10)
	pos2 = floor(700)
	force3 = floor(20)
	pos3 = floor(300) 

	def bit_bang_spi_master_UR_script(input):
		local i = 0
		while i < 8:
			set_digital_out(8, True)
		
			if input >= 128:
				set_digital_out(9, False) 
				input = input - 128
			else:
				set_digital_out(9, True) 
			end  
			input = input * 2
			sync()
			set_digital_out(8, False)
			sync() 
			i = i + 1
		end
	end

	def on_wait(input):
		local sync_cnt = 0
		local sync_cnt_target = floor(input/0.008)
		while sync_cnt < sync_cnt_target:
			sync()
			sync_cnt = sync_cnt + 1
		end
	end	
		
	version_number = 0 
	length_ = 15				 


	set_tool_voltage(0)
	on_wait(2.0)
	set_digital_out(9, False) 
	set_digital_out(8, False)


	set_tool_voltage(24)


  on_wait(1.0)


	


	#bit_bang_spi_master_UR_script(version_number)
  #bit_bang_spi_master_UR_script(length_)

	bit_bang_spi_master_UR_script(force0)
	bit_bang_spi_master_UR_script(pos0 - (floor(pos0/256)*256))
	bit_bang_spi_master_UR_script(floor(pos0/256))

	#bit_bang_spi_master_UR_script(force1)
	#bit_bang_spi_master_UR_script(pos1 - (floor(pos1/256)*256))
	#bit_bang_spi_master_UR_script(floor(pos1/256))

	#bit_bang_spi_master_UR_script(force2)
	#bit_bang_spi_master_UR_script(pos2 - (floor(pos2/256)*256))
	#bit_bang_spi_master_UR_script(floor(pos2/256))

	#bit_bang_spi_master_UR_script(force3)
	#bit_bang_spi_master_UR_script(pos3 - (floor(pos3/256)*256))
	#bit_bang_spi_master_UR_script(floor(pos3/256))

	#MSB will determine if DO9 is True(LSB == 0) or False(LSB == 1)
	bit_bang_spi_master_UR_script(84)
	#this value will be sampled as starting status, next change will be received as a command
end
